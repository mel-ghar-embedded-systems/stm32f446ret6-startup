
blink-led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001658  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800181c  0800181c  0001181c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800182c  0800182c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800182c  0800182c  0001182c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001834  08001834  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001834  08001834  00011834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001838  08001838  00011838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800183c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001848  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001848  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000492d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000134a  00000000  00000000  00024969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000508  00000000  00000000  00025cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003c2  00000000  00000000  000261c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fc62  00000000  00000000  00026582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000050ad  00000000  00000000  000461e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2398  00000000  00000000  0004b291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000003c  00000000  00000000  0010d629  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001000  00000000  00000000  0010d668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000fd  00000000  00000000  0010e668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 000007f3  00000000  00000000  0010e765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001d8:	f000 b80c 	b.w	80001f4 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f001 f9be 	bl	8001564 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_idiv0>:
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08001804 	.word	0x08001804

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08001804 	.word	0x08001804

08000238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023c:	f000 f932 	bl	80004a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000240:	f000 f804 	bl	800024c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000244:	f000 f862 	bl	800030c <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000248:	bf00      	nop
 800024a:	e7fd      	b.n	8000248 <main+0x10>

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b094      	sub	sp, #80	; 0x50
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	f107 031c 	add.w	r3, r7, #28
 8000256:	2234      	movs	r2, #52	; 0x34
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f001 f97a 	bl	8001554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	f107 0308 	add.w	r3, r7, #8
 8000264:	2200      	movs	r2, #0
 8000266:	601a      	str	r2, [r3, #0]
 8000268:	605a      	str	r2, [r3, #4]
 800026a:	609a      	str	r2, [r3, #8]
 800026c:	60da      	str	r2, [r3, #12]
 800026e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000270:	2300      	movs	r3, #0
 8000272:	607b      	str	r3, [r7, #4]
 8000274:	4b23      	ldr	r3, [pc, #140]	; (8000304 <SystemClock_Config+0xb8>)
 8000276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000278:	4a22      	ldr	r2, [pc, #136]	; (8000304 <SystemClock_Config+0xb8>)
 800027a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800027e:	6413      	str	r3, [r2, #64]	; 0x40
 8000280:	4b20      	ldr	r3, [pc, #128]	; (8000304 <SystemClock_Config+0xb8>)
 8000282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000288:	607b      	str	r3, [r7, #4]
 800028a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800028c:	2300      	movs	r3, #0
 800028e:	603b      	str	r3, [r7, #0]
 8000290:	4b1d      	ldr	r3, [pc, #116]	; (8000308 <SystemClock_Config+0xbc>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000298:	4a1b      	ldr	r2, [pc, #108]	; (8000308 <SystemClock_Config+0xbc>)
 800029a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800029e:	6013      	str	r3, [r2, #0]
 80002a0:	4b19      	ldr	r3, [pc, #100]	; (8000308 <SystemClock_Config+0xbc>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80002a8:	603b      	str	r3, [r7, #0]
 80002aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ac:	2302      	movs	r3, #2
 80002ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b0:	2301      	movs	r3, #1
 80002b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b4:	2310      	movs	r3, #16
 80002b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002b8:	2300      	movs	r3, #0
 80002ba:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002bc:	f107 031c 	add.w	r3, r7, #28
 80002c0:	4618      	mov	r0, r3
 80002c2:	f000 fe85 	bl	8000fd0 <HAL_RCC_OscConfig>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002cc:	f000 f850 	bl	8000370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d0:	230f      	movs	r3, #15
 80002d2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002d4:	2300      	movs	r3, #0
 80002d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d8:	2300      	movs	r3, #0
 80002da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002dc:	2300      	movs	r3, #0
 80002de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e0:	2300      	movs	r3, #0
 80002e2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002e4:	f107 0308 	add.w	r3, r7, #8
 80002e8:	2100      	movs	r1, #0
 80002ea:	4618      	mov	r0, r3
 80002ec:	f000 fbe0 	bl	8000ab0 <HAL_RCC_ClockConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002f6:	f000 f83b 	bl	8000370 <Error_Handler>
  }
}
 80002fa:	bf00      	nop
 80002fc:	3750      	adds	r7, #80	; 0x50
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	40023800 	.word	0x40023800
 8000308:	40007000 	.word	0x40007000

0800030c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b086      	sub	sp, #24
 8000310:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	2200      	movs	r2, #0
 8000316:	601a      	str	r2, [r3, #0]
 8000318:	605a      	str	r2, [r3, #4]
 800031a:	609a      	str	r2, [r3, #8]
 800031c:	60da      	str	r2, [r3, #12]
 800031e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000320:	2300      	movs	r3, #0
 8000322:	603b      	str	r3, [r7, #0]
 8000324:	4b10      	ldr	r3, [pc, #64]	; (8000368 <MX_GPIO_Init+0x5c>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4a0f      	ldr	r2, [pc, #60]	; (8000368 <MX_GPIO_Init+0x5c>)
 800032a:	f043 0301 	orr.w	r3, r3, #1
 800032e:	6313      	str	r3, [r2, #48]	; 0x30
 8000330:	4b0d      	ldr	r3, [pc, #52]	; (8000368 <MX_GPIO_Init+0x5c>)
 8000332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000334:	f003 0301 	and.w	r3, r3, #1
 8000338:	603b      	str	r3, [r7, #0]
 800033a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	2120      	movs	r1, #32
 8000340:	480a      	ldr	r0, [pc, #40]	; (800036c <MX_GPIO_Init+0x60>)
 8000342:	f000 fb9b 	bl	8000a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000346:	2320      	movs	r3, #32
 8000348:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800034a:	2301      	movs	r3, #1
 800034c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034e:	2300      	movs	r3, #0
 8000350:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000352:	2300      	movs	r3, #0
 8000354:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	4619      	mov	r1, r3
 800035a:	4804      	ldr	r0, [pc, #16]	; (800036c <MX_GPIO_Init+0x60>)
 800035c:	f000 f9fa 	bl	8000754 <HAL_GPIO_Init>

}
 8000360:	bf00      	nop
 8000362:	3718      	adds	r7, #24
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	40023800 	.word	0x40023800
 800036c:	40020000 	.word	0x40020000

08000370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000374:	b672      	cpsid	i
}
 8000376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000378:	bf00      	nop
 800037a:	e7fd      	b.n	8000378 <Error_Handler+0x8>

0800037c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000382:	2300      	movs	r3, #0
 8000384:	607b      	str	r3, [r7, #4]
 8000386:	4b10      	ldr	r3, [pc, #64]	; (80003c8 <HAL_MspInit+0x4c>)
 8000388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800038a:	4a0f      	ldr	r2, [pc, #60]	; (80003c8 <HAL_MspInit+0x4c>)
 800038c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000390:	6453      	str	r3, [r2, #68]	; 0x44
 8000392:	4b0d      	ldr	r3, [pc, #52]	; (80003c8 <HAL_MspInit+0x4c>)
 8000394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800039e:	2300      	movs	r3, #0
 80003a0:	603b      	str	r3, [r7, #0]
 80003a2:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <HAL_MspInit+0x4c>)
 80003a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003a6:	4a08      	ldr	r2, [pc, #32]	; (80003c8 <HAL_MspInit+0x4c>)
 80003a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003ac:	6413      	str	r3, [r2, #64]	; 0x40
 80003ae:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <HAL_MspInit+0x4c>)
 80003b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003b6:	603b      	str	r3, [r7, #0]
 80003b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	40023800 	.word	0x40023800

080003cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003d0:	bf00      	nop
 80003d2:	e7fd      	b.n	80003d0 <NMI_Handler+0x4>

080003d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003d8:	bf00      	nop
 80003da:	e7fd      	b.n	80003d8 <HardFault_Handler+0x4>

080003dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003e0:	bf00      	nop
 80003e2:	e7fd      	b.n	80003e0 <MemManage_Handler+0x4>

080003e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003e8:	bf00      	nop
 80003ea:	e7fd      	b.n	80003e8 <BusFault_Handler+0x4>

080003ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003f0:	bf00      	nop
 80003f2:	e7fd      	b.n	80003f0 <UsageFault_Handler+0x4>

080003f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr

08000402 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000402:	b480      	push	{r7}
 8000404:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000406:	bf00      	nop
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr

08000410 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000414:	bf00      	nop
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr

0800041e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800041e:	b580      	push	{r7, lr}
 8000420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000422:	f000 f891 	bl	8000548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
	...

0800042c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000430:	4b06      	ldr	r3, [pc, #24]	; (800044c <SystemInit+0x20>)
 8000432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000436:	4a05      	ldr	r2, [pc, #20]	; (800044c <SystemInit+0x20>)
 8000438:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800043c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000440:	bf00      	nop
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	e000ed00 	.word	0xe000ed00

08000450 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000450:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000488 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000454:	480d      	ldr	r0, [pc, #52]	; (800048c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000456:	490e      	ldr	r1, [pc, #56]	; (8000490 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000458:	4a0e      	ldr	r2, [pc, #56]	; (8000494 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800045a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800045c:	e002      	b.n	8000464 <LoopCopyDataInit>

0800045e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800045e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000462:	3304      	adds	r3, #4

08000464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000468:	d3f9      	bcc.n	800045e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800046a:	4a0b      	ldr	r2, [pc, #44]	; (8000498 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800046c:	4c0b      	ldr	r4, [pc, #44]	; (800049c <LoopFillZerobss+0x26>)
  movs r3, #0
 800046e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000470:	e001      	b.n	8000476 <LoopFillZerobss>

08000472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000474:	3204      	adds	r2, #4

08000476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000478:	d3fb      	bcc.n	8000472 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800047a:	f7ff ffd7 	bl	800042c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800047e:	f001 f845 	bl	800150c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000482:	f7ff fed9 	bl	8000238 <main>
  bx  lr    
 8000486:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000488:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800048c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000490:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000494:	0800183c 	.word	0x0800183c
  ldr r2, =_sbss
 8000498:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800049c:	2000002c 	.word	0x2000002c

080004a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004a0:	e7fe      	b.n	80004a0 <ADC_IRQHandler>
	...

080004a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004a8:	4b0e      	ldr	r3, [pc, #56]	; (80004e4 <HAL_Init+0x40>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a0d      	ldr	r2, [pc, #52]	; (80004e4 <HAL_Init+0x40>)
 80004ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004b4:	4b0b      	ldr	r3, [pc, #44]	; (80004e4 <HAL_Init+0x40>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a0a      	ldr	r2, [pc, #40]	; (80004e4 <HAL_Init+0x40>)
 80004ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004c0:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <HAL_Init+0x40>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a07      	ldr	r2, [pc, #28]	; (80004e4 <HAL_Init+0x40>)
 80004c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004cc:	2003      	movs	r0, #3
 80004ce:	f000 f90d 	bl	80006ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004d2:	200f      	movs	r0, #15
 80004d4:	f000 f808 	bl	80004e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004d8:	f7ff ff50 	bl	800037c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004dc:	2300      	movs	r3, #0
}
 80004de:	4618      	mov	r0, r3
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40023c00 	.word	0x40023c00

080004e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004f0:	4b12      	ldr	r3, [pc, #72]	; (800053c <HAL_InitTick+0x54>)
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	4b12      	ldr	r3, [pc, #72]	; (8000540 <HAL_InitTick+0x58>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	4619      	mov	r1, r3
 80004fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000502:	fbb2 f3f3 	udiv	r3, r2, r3
 8000506:	4618      	mov	r0, r3
 8000508:	f000 f917 	bl	800073a <HAL_SYSTICK_Config>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000512:	2301      	movs	r3, #1
 8000514:	e00e      	b.n	8000534 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2b0f      	cmp	r3, #15
 800051a:	d80a      	bhi.n	8000532 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800051c:	2200      	movs	r2, #0
 800051e:	6879      	ldr	r1, [r7, #4]
 8000520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000524:	f000 f8ed 	bl	8000702 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000528:	4a06      	ldr	r2, [pc, #24]	; (8000544 <HAL_InitTick+0x5c>)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800052e:	2300      	movs	r3, #0
 8000530:	e000      	b.n	8000534 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000532:	2301      	movs	r3, #1
}
 8000534:	4618      	mov	r0, r3
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000000 	.word	0x20000000
 8000540:	20000008 	.word	0x20000008
 8000544:	20000004 	.word	0x20000004

08000548 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <HAL_IncTick+0x20>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	461a      	mov	r2, r3
 8000552:	4b06      	ldr	r3, [pc, #24]	; (800056c <HAL_IncTick+0x24>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4413      	add	r3, r2
 8000558:	4a04      	ldr	r2, [pc, #16]	; (800056c <HAL_IncTick+0x24>)
 800055a:	6013      	str	r3, [r2, #0]
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	20000008 	.word	0x20000008
 800056c:	20000028 	.word	0x20000028

08000570 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  return uwTick;
 8000574:	4b03      	ldr	r3, [pc, #12]	; (8000584 <HAL_GetTick+0x14>)
 8000576:	681b      	ldr	r3, [r3, #0]
}
 8000578:	4618      	mov	r0, r3
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	20000028 	.word	0x20000028

08000588 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	f003 0307 	and.w	r3, r3, #7
 8000596:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <__NVIC_SetPriorityGrouping+0x44>)
 800059a:	68db      	ldr	r3, [r3, #12]
 800059c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800059e:	68ba      	ldr	r2, [r7, #8]
 80005a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005a4:	4013      	ands	r3, r2
 80005a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ba:	4a04      	ldr	r2, [pc, #16]	; (80005cc <__NVIC_SetPriorityGrouping+0x44>)
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	60d3      	str	r3, [r2, #12]
}
 80005c0:	bf00      	nop
 80005c2:	3714      	adds	r7, #20
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr
 80005cc:	e000ed00 	.word	0xe000ed00

080005d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005d4:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <__NVIC_GetPriorityGrouping+0x18>)
 80005d6:	68db      	ldr	r3, [r3, #12]
 80005d8:	0a1b      	lsrs	r3, r3, #8
 80005da:	f003 0307 	and.w	r3, r3, #7
}
 80005de:	4618      	mov	r0, r3
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	e000ed00 	.word	0xe000ed00

080005ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	6039      	str	r1, [r7, #0]
 80005f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	db0a      	blt.n	8000616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	b2da      	uxtb	r2, r3
 8000604:	490c      	ldr	r1, [pc, #48]	; (8000638 <__NVIC_SetPriority+0x4c>)
 8000606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060a:	0112      	lsls	r2, r2, #4
 800060c:	b2d2      	uxtb	r2, r2
 800060e:	440b      	add	r3, r1
 8000610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000614:	e00a      	b.n	800062c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	b2da      	uxtb	r2, r3
 800061a:	4908      	ldr	r1, [pc, #32]	; (800063c <__NVIC_SetPriority+0x50>)
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	f003 030f 	and.w	r3, r3, #15
 8000622:	3b04      	subs	r3, #4
 8000624:	0112      	lsls	r2, r2, #4
 8000626:	b2d2      	uxtb	r2, r2
 8000628:	440b      	add	r3, r1
 800062a:	761a      	strb	r2, [r3, #24]
}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	e000e100 	.word	0xe000e100
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000640:	b480      	push	{r7}
 8000642:	b089      	sub	sp, #36	; 0x24
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	f003 0307 	and.w	r3, r3, #7
 8000652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000654:	69fb      	ldr	r3, [r7, #28]
 8000656:	f1c3 0307 	rsb	r3, r3, #7
 800065a:	2b04      	cmp	r3, #4
 800065c:	bf28      	it	cs
 800065e:	2304      	movcs	r3, #4
 8000660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000662:	69fb      	ldr	r3, [r7, #28]
 8000664:	3304      	adds	r3, #4
 8000666:	2b06      	cmp	r3, #6
 8000668:	d902      	bls.n	8000670 <NVIC_EncodePriority+0x30>
 800066a:	69fb      	ldr	r3, [r7, #28]
 800066c:	3b03      	subs	r3, #3
 800066e:	e000      	b.n	8000672 <NVIC_EncodePriority+0x32>
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000674:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000678:	69bb      	ldr	r3, [r7, #24]
 800067a:	fa02 f303 	lsl.w	r3, r2, r3
 800067e:	43da      	mvns	r2, r3
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	401a      	ands	r2, r3
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000688:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	fa01 f303 	lsl.w	r3, r1, r3
 8000692:	43d9      	mvns	r1, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000698:	4313      	orrs	r3, r2
         );
}
 800069a:	4618      	mov	r0, r3
 800069c:	3724      	adds	r7, #36	; 0x24
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
	...

080006a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	3b01      	subs	r3, #1
 80006b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006b8:	d301      	bcc.n	80006be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006ba:	2301      	movs	r3, #1
 80006bc:	e00f      	b.n	80006de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006be:	4a0a      	ldr	r2, [pc, #40]	; (80006e8 <SysTick_Config+0x40>)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	3b01      	subs	r3, #1
 80006c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006c6:	210f      	movs	r1, #15
 80006c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006cc:	f7ff ff8e 	bl	80005ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006d0:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <SysTick_Config+0x40>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006d6:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <SysTick_Config+0x40>)
 80006d8:	2207      	movs	r2, #7
 80006da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006dc:	2300      	movs	r3, #0
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	e000e010 	.word	0xe000e010

080006ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006f4:	6878      	ldr	r0, [r7, #4]
 80006f6:	f7ff ff47 	bl	8000588 <__NVIC_SetPriorityGrouping>
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000702:	b580      	push	{r7, lr}
 8000704:	b086      	sub	sp, #24
 8000706:	af00      	add	r7, sp, #0
 8000708:	4603      	mov	r3, r0
 800070a:	60b9      	str	r1, [r7, #8]
 800070c:	607a      	str	r2, [r7, #4]
 800070e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000714:	f7ff ff5c 	bl	80005d0 <__NVIC_GetPriorityGrouping>
 8000718:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	68b9      	ldr	r1, [r7, #8]
 800071e:	6978      	ldr	r0, [r7, #20]
 8000720:	f7ff ff8e 	bl	8000640 <NVIC_EncodePriority>
 8000724:	4602      	mov	r2, r0
 8000726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800072a:	4611      	mov	r1, r2
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff ff5d 	bl	80005ec <__NVIC_SetPriority>
}
 8000732:	bf00      	nop
 8000734:	3718      	adds	r7, #24
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	b082      	sub	sp, #8
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	f7ff ffb0 	bl	80006a8 <SysTick_Config>
 8000748:	4603      	mov	r3, r0
}
 800074a:	4618      	mov	r0, r3
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000754:	b480      	push	{r7}
 8000756:	b089      	sub	sp, #36	; 0x24
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]
 800076e:	e165      	b.n	8000a3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000770:	2201      	movs	r2, #1
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	fa02 f303 	lsl.w	r3, r2, r3
 8000778:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	697a      	ldr	r2, [r7, #20]
 8000780:	4013      	ands	r3, r2
 8000782:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000784:	693a      	ldr	r2, [r7, #16]
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	429a      	cmp	r2, r3
 800078a:	f040 8154 	bne.w	8000a36 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	f003 0303 	and.w	r3, r3, #3
 8000796:	2b01      	cmp	r3, #1
 8000798:	d005      	beq.n	80007a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80007a2:	2b02      	cmp	r3, #2
 80007a4:	d130      	bne.n	8000808 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	689b      	ldr	r3, [r3, #8]
 80007aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007ac:	69fb      	ldr	r3, [r7, #28]
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	2203      	movs	r2, #3
 80007b2:	fa02 f303 	lsl.w	r3, r2, r3
 80007b6:	43db      	mvns	r3, r3
 80007b8:	69ba      	ldr	r2, [r7, #24]
 80007ba:	4013      	ands	r3, r2
 80007bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	68da      	ldr	r2, [r3, #12]
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	69ba      	ldr	r2, [r7, #24]
 80007cc:	4313      	orrs	r3, r2
 80007ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	69ba      	ldr	r2, [r7, #24]
 80007d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007dc:	2201      	movs	r2, #1
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	fa02 f303 	lsl.w	r3, r2, r3
 80007e4:	43db      	mvns	r3, r3
 80007e6:	69ba      	ldr	r2, [r7, #24]
 80007e8:	4013      	ands	r3, r2
 80007ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	091b      	lsrs	r3, r3, #4
 80007f2:	f003 0201 	and.w	r2, r3, #1
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	fa02 f303 	lsl.w	r3, r2, r3
 80007fc:	69ba      	ldr	r2, [r7, #24]
 80007fe:	4313      	orrs	r3, r2
 8000800:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	69ba      	ldr	r2, [r7, #24]
 8000806:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	f003 0303 	and.w	r3, r3, #3
 8000810:	2b03      	cmp	r3, #3
 8000812:	d017      	beq.n	8000844 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	68db      	ldr	r3, [r3, #12]
 8000818:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	2203      	movs	r2, #3
 8000820:	fa02 f303 	lsl.w	r3, r2, r3
 8000824:	43db      	mvns	r3, r3
 8000826:	69ba      	ldr	r2, [r7, #24]
 8000828:	4013      	ands	r3, r2
 800082a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	689a      	ldr	r2, [r3, #8]
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	fa02 f303 	lsl.w	r3, r2, r3
 8000838:	69ba      	ldr	r2, [r7, #24]
 800083a:	4313      	orrs	r3, r2
 800083c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	69ba      	ldr	r2, [r7, #24]
 8000842:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	f003 0303 	and.w	r3, r3, #3
 800084c:	2b02      	cmp	r3, #2
 800084e:	d123      	bne.n	8000898 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000850:	69fb      	ldr	r3, [r7, #28]
 8000852:	08da      	lsrs	r2, r3, #3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	3208      	adds	r2, #8
 8000858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800085c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	f003 0307 	and.w	r3, r3, #7
 8000864:	009b      	lsls	r3, r3, #2
 8000866:	220f      	movs	r2, #15
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	43db      	mvns	r3, r3
 800086e:	69ba      	ldr	r2, [r7, #24]
 8000870:	4013      	ands	r3, r2
 8000872:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	691a      	ldr	r2, [r3, #16]
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	f003 0307 	and.w	r3, r3, #7
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	69ba      	ldr	r2, [r7, #24]
 8000886:	4313      	orrs	r3, r2
 8000888:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	08da      	lsrs	r2, r3, #3
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	3208      	adds	r2, #8
 8000892:	69b9      	ldr	r1, [r7, #24]
 8000894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	2203      	movs	r2, #3
 80008a4:	fa02 f303 	lsl.w	r3, r2, r3
 80008a8:	43db      	mvns	r3, r3
 80008aa:	69ba      	ldr	r2, [r7, #24]
 80008ac:	4013      	ands	r3, r2
 80008ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	f003 0203 	and.w	r2, r3, #3
 80008b8:	69fb      	ldr	r3, [r7, #28]
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	fa02 f303 	lsl.w	r3, r2, r3
 80008c0:	69ba      	ldr	r2, [r7, #24]
 80008c2:	4313      	orrs	r3, r2
 80008c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	69ba      	ldr	r2, [r7, #24]
 80008ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	f000 80ae 	beq.w	8000a36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	4b5d      	ldr	r3, [pc, #372]	; (8000a54 <HAL_GPIO_Init+0x300>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e2:	4a5c      	ldr	r2, [pc, #368]	; (8000a54 <HAL_GPIO_Init+0x300>)
 80008e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ea:	4b5a      	ldr	r3, [pc, #360]	; (8000a54 <HAL_GPIO_Init+0x300>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80008f6:	4a58      	ldr	r2, [pc, #352]	; (8000a58 <HAL_GPIO_Init+0x304>)
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	089b      	lsrs	r3, r3, #2
 80008fc:	3302      	adds	r3, #2
 80008fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000902:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	f003 0303 	and.w	r3, r3, #3
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	220f      	movs	r2, #15
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	43db      	mvns	r3, r3
 8000914:	69ba      	ldr	r2, [r7, #24]
 8000916:	4013      	ands	r3, r2
 8000918:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4a4f      	ldr	r2, [pc, #316]	; (8000a5c <HAL_GPIO_Init+0x308>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d025      	beq.n	800096e <HAL_GPIO_Init+0x21a>
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4a4e      	ldr	r2, [pc, #312]	; (8000a60 <HAL_GPIO_Init+0x30c>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d01f      	beq.n	800096a <HAL_GPIO_Init+0x216>
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4a4d      	ldr	r2, [pc, #308]	; (8000a64 <HAL_GPIO_Init+0x310>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d019      	beq.n	8000966 <HAL_GPIO_Init+0x212>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4a4c      	ldr	r2, [pc, #304]	; (8000a68 <HAL_GPIO_Init+0x314>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d013      	beq.n	8000962 <HAL_GPIO_Init+0x20e>
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a4b      	ldr	r2, [pc, #300]	; (8000a6c <HAL_GPIO_Init+0x318>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d00d      	beq.n	800095e <HAL_GPIO_Init+0x20a>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a4a      	ldr	r2, [pc, #296]	; (8000a70 <HAL_GPIO_Init+0x31c>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d007      	beq.n	800095a <HAL_GPIO_Init+0x206>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4a49      	ldr	r2, [pc, #292]	; (8000a74 <HAL_GPIO_Init+0x320>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d101      	bne.n	8000956 <HAL_GPIO_Init+0x202>
 8000952:	2306      	movs	r3, #6
 8000954:	e00c      	b.n	8000970 <HAL_GPIO_Init+0x21c>
 8000956:	2307      	movs	r3, #7
 8000958:	e00a      	b.n	8000970 <HAL_GPIO_Init+0x21c>
 800095a:	2305      	movs	r3, #5
 800095c:	e008      	b.n	8000970 <HAL_GPIO_Init+0x21c>
 800095e:	2304      	movs	r3, #4
 8000960:	e006      	b.n	8000970 <HAL_GPIO_Init+0x21c>
 8000962:	2303      	movs	r3, #3
 8000964:	e004      	b.n	8000970 <HAL_GPIO_Init+0x21c>
 8000966:	2302      	movs	r3, #2
 8000968:	e002      	b.n	8000970 <HAL_GPIO_Init+0x21c>
 800096a:	2301      	movs	r3, #1
 800096c:	e000      	b.n	8000970 <HAL_GPIO_Init+0x21c>
 800096e:	2300      	movs	r3, #0
 8000970:	69fa      	ldr	r2, [r7, #28]
 8000972:	f002 0203 	and.w	r2, r2, #3
 8000976:	0092      	lsls	r2, r2, #2
 8000978:	4093      	lsls	r3, r2
 800097a:	69ba      	ldr	r2, [r7, #24]
 800097c:	4313      	orrs	r3, r2
 800097e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000980:	4935      	ldr	r1, [pc, #212]	; (8000a58 <HAL_GPIO_Init+0x304>)
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	089b      	lsrs	r3, r3, #2
 8000986:	3302      	adds	r3, #2
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800098e:	4b3a      	ldr	r3, [pc, #232]	; (8000a78 <HAL_GPIO_Init+0x324>)
 8000990:	689b      	ldr	r3, [r3, #8]
 8000992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000994:	693b      	ldr	r3, [r7, #16]
 8000996:	43db      	mvns	r3, r3
 8000998:	69ba      	ldr	r2, [r7, #24]
 800099a:	4013      	ands	r3, r2
 800099c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d003      	beq.n	80009b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80009aa:	69ba      	ldr	r2, [r7, #24]
 80009ac:	693b      	ldr	r3, [r7, #16]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80009b2:	4a31      	ldr	r2, [pc, #196]	; (8000a78 <HAL_GPIO_Init+0x324>)
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80009b8:	4b2f      	ldr	r3, [pc, #188]	; (8000a78 <HAL_GPIO_Init+0x324>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	43db      	mvns	r3, r3
 80009c2:	69ba      	ldr	r2, [r7, #24]
 80009c4:	4013      	ands	r3, r2
 80009c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d003      	beq.n	80009dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80009d4:	69ba      	ldr	r2, [r7, #24]
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	4313      	orrs	r3, r2
 80009da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80009dc:	4a26      	ldr	r2, [pc, #152]	; (8000a78 <HAL_GPIO_Init+0x324>)
 80009de:	69bb      	ldr	r3, [r7, #24]
 80009e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80009e2:	4b25      	ldr	r3, [pc, #148]	; (8000a78 <HAL_GPIO_Init+0x324>)
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009e8:	693b      	ldr	r3, [r7, #16]
 80009ea:	43db      	mvns	r3, r3
 80009ec:	69ba      	ldr	r2, [r7, #24]
 80009ee:	4013      	ands	r3, r2
 80009f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d003      	beq.n	8000a06 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80009fe:	69ba      	ldr	r2, [r7, #24]
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a06:	4a1c      	ldr	r2, [pc, #112]	; (8000a78 <HAL_GPIO_Init+0x324>)
 8000a08:	69bb      	ldr	r3, [r7, #24]
 8000a0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <HAL_GPIO_Init+0x324>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	43db      	mvns	r3, r3
 8000a16:	69ba      	ldr	r2, [r7, #24]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d003      	beq.n	8000a30 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a30:	4a11      	ldr	r2, [pc, #68]	; (8000a78 <HAL_GPIO_Init+0x324>)
 8000a32:	69bb      	ldr	r3, [r7, #24]
 8000a34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	61fb      	str	r3, [r7, #28]
 8000a3c:	69fb      	ldr	r3, [r7, #28]
 8000a3e:	2b0f      	cmp	r3, #15
 8000a40:	f67f ae96 	bls.w	8000770 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a44:	bf00      	nop
 8000a46:	bf00      	nop
 8000a48:	3724      	adds	r7, #36	; 0x24
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40013800 	.word	0x40013800
 8000a5c:	40020000 	.word	0x40020000
 8000a60:	40020400 	.word	0x40020400
 8000a64:	40020800 	.word	0x40020800
 8000a68:	40020c00 	.word	0x40020c00
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40021400 	.word	0x40021400
 8000a74:	40021800 	.word	0x40021800
 8000a78:	40013c00 	.word	0x40013c00

08000a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	460b      	mov	r3, r1
 8000a86:	807b      	strh	r3, [r7, #2]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a8c:	787b      	ldrb	r3, [r7, #1]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d003      	beq.n	8000a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a92:	887a      	ldrh	r2, [r7, #2]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000a98:	e003      	b.n	8000aa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000a9a:	887b      	ldrh	r3, [r7, #2]
 8000a9c:	041a      	lsls	r2, r3, #16
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	619a      	str	r2, [r3, #24]
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
	...

08000ab0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d101      	bne.n	8000ac4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e0cc      	b.n	8000c5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000ac4:	4b68      	ldr	r3, [pc, #416]	; (8000c68 <HAL_RCC_ClockConfig+0x1b8>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f003 030f 	and.w	r3, r3, #15
 8000acc:	683a      	ldr	r2, [r7, #0]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d90c      	bls.n	8000aec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ad2:	4b65      	ldr	r3, [pc, #404]	; (8000c68 <HAL_RCC_ClockConfig+0x1b8>)
 8000ad4:	683a      	ldr	r2, [r7, #0]
 8000ad6:	b2d2      	uxtb	r2, r2
 8000ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ada:	4b63      	ldr	r3, [pc, #396]	; (8000c68 <HAL_RCC_ClockConfig+0x1b8>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f003 030f 	and.w	r3, r3, #15
 8000ae2:	683a      	ldr	r2, [r7, #0]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d001      	beq.n	8000aec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	e0b8      	b.n	8000c5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f003 0302 	and.w	r3, r3, #2
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d020      	beq.n	8000b3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f003 0304 	and.w	r3, r3, #4
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d005      	beq.n	8000b10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000b04:	4b59      	ldr	r3, [pc, #356]	; (8000c6c <HAL_RCC_ClockConfig+0x1bc>)
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	4a58      	ldr	r2, [pc, #352]	; (8000c6c <HAL_RCC_ClockConfig+0x1bc>)
 8000b0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000b0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f003 0308 	and.w	r3, r3, #8
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d005      	beq.n	8000b28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000b1c:	4b53      	ldr	r3, [pc, #332]	; (8000c6c <HAL_RCC_ClockConfig+0x1bc>)
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	4a52      	ldr	r2, [pc, #328]	; (8000c6c <HAL_RCC_ClockConfig+0x1bc>)
 8000b22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000b26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b28:	4b50      	ldr	r3, [pc, #320]	; (8000c6c <HAL_RCC_ClockConfig+0x1bc>)
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	494d      	ldr	r1, [pc, #308]	; (8000c6c <HAL_RCC_ClockConfig+0x1bc>)
 8000b36:	4313      	orrs	r3, r2
 8000b38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d044      	beq.n	8000bd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d107      	bne.n	8000b5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b4e:	4b47      	ldr	r3, [pc, #284]	; (8000c6c <HAL_RCC_ClockConfig+0x1bc>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d119      	bne.n	8000b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e07f      	b.n	8000c5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	d003      	beq.n	8000b6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000b6a:	2b03      	cmp	r3, #3
 8000b6c:	d107      	bne.n	8000b7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b6e:	4b3f      	ldr	r3, [pc, #252]	; (8000c6c <HAL_RCC_ClockConfig+0x1bc>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d109      	bne.n	8000b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e06f      	b.n	8000c5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b7e:	4b3b      	ldr	r3, [pc, #236]	; (8000c6c <HAL_RCC_ClockConfig+0x1bc>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d101      	bne.n	8000b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e067      	b.n	8000c5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b8e:	4b37      	ldr	r3, [pc, #220]	; (8000c6c <HAL_RCC_ClockConfig+0x1bc>)
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	f023 0203 	bic.w	r2, r3, #3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	4934      	ldr	r1, [pc, #208]	; (8000c6c <HAL_RCC_ClockConfig+0x1bc>)
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000ba0:	f7ff fce6 	bl	8000570 <HAL_GetTick>
 8000ba4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ba6:	e00a      	b.n	8000bbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ba8:	f7ff fce2 	bl	8000570 <HAL_GetTick>
 8000bac:	4602      	mov	r2, r0
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d901      	bls.n	8000bbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	e04f      	b.n	8000c5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000bbe:	4b2b      	ldr	r3, [pc, #172]	; (8000c6c <HAL_RCC_ClockConfig+0x1bc>)
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	f003 020c 	and.w	r2, r3, #12
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d1eb      	bne.n	8000ba8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000bd0:	4b25      	ldr	r3, [pc, #148]	; (8000c68 <HAL_RCC_ClockConfig+0x1b8>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f003 030f 	and.w	r3, r3, #15
 8000bd8:	683a      	ldr	r2, [r7, #0]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d20c      	bcs.n	8000bf8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bde:	4b22      	ldr	r3, [pc, #136]	; (8000c68 <HAL_RCC_ClockConfig+0x1b8>)
 8000be0:	683a      	ldr	r2, [r7, #0]
 8000be2:	b2d2      	uxtb	r2, r2
 8000be4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000be6:	4b20      	ldr	r3, [pc, #128]	; (8000c68 <HAL_RCC_ClockConfig+0x1b8>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f003 030f 	and.w	r3, r3, #15
 8000bee:	683a      	ldr	r2, [r7, #0]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d001      	beq.n	8000bf8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e032      	b.n	8000c5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f003 0304 	and.w	r3, r3, #4
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d008      	beq.n	8000c16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c04:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <HAL_RCC_ClockConfig+0x1bc>)
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	4916      	ldr	r1, [pc, #88]	; (8000c6c <HAL_RCC_ClockConfig+0x1bc>)
 8000c12:	4313      	orrs	r3, r2
 8000c14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f003 0308 	and.w	r3, r3, #8
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d009      	beq.n	8000c36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c22:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <HAL_RCC_ClockConfig+0x1bc>)
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	691b      	ldr	r3, [r3, #16]
 8000c2e:	00db      	lsls	r3, r3, #3
 8000c30:	490e      	ldr	r1, [pc, #56]	; (8000c6c <HAL_RCC_ClockConfig+0x1bc>)
 8000c32:	4313      	orrs	r3, r2
 8000c34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c36:	f000 f821 	bl	8000c7c <HAL_RCC_GetSysClockFreq>
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <HAL_RCC_ClockConfig+0x1bc>)
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	091b      	lsrs	r3, r3, #4
 8000c42:	f003 030f 	and.w	r3, r3, #15
 8000c46:	490a      	ldr	r1, [pc, #40]	; (8000c70 <HAL_RCC_ClockConfig+0x1c0>)
 8000c48:	5ccb      	ldrb	r3, [r1, r3]
 8000c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c4e:	4a09      	ldr	r2, [pc, #36]	; (8000c74 <HAL_RCC_ClockConfig+0x1c4>)
 8000c50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <HAL_RCC_ClockConfig+0x1c8>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fc46 	bl	80004e8 <HAL_InitTick>

  return HAL_OK;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40023c00 	.word	0x40023c00
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	0800181c 	.word	0x0800181c
 8000c74:	20000000 	.word	0x20000000
 8000c78:	20000004 	.word	0x20000004

08000c7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000c7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000c80:	b0a6      	sub	sp, #152	; 0x98
 8000c82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8000c84:	2300      	movs	r3, #0
 8000c86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8000c90:	2300      	movs	r3, #0
 8000c92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8000c96:	2300      	movs	r3, #0
 8000c98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ca2:	4bc8      	ldr	r3, [pc, #800]	; (8000fc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	f003 030c 	and.w	r3, r3, #12
 8000caa:	2b0c      	cmp	r3, #12
 8000cac:	f200 817e 	bhi.w	8000fac <HAL_RCC_GetSysClockFreq+0x330>
 8000cb0:	a201      	add	r2, pc, #4	; (adr r2, 8000cb8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8000cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb6:	bf00      	nop
 8000cb8:	08000ced 	.word	0x08000ced
 8000cbc:	08000fad 	.word	0x08000fad
 8000cc0:	08000fad 	.word	0x08000fad
 8000cc4:	08000fad 	.word	0x08000fad
 8000cc8:	08000cf5 	.word	0x08000cf5
 8000ccc:	08000fad 	.word	0x08000fad
 8000cd0:	08000fad 	.word	0x08000fad
 8000cd4:	08000fad 	.word	0x08000fad
 8000cd8:	08000cfd 	.word	0x08000cfd
 8000cdc:	08000fad 	.word	0x08000fad
 8000ce0:	08000fad 	.word	0x08000fad
 8000ce4:	08000fad 	.word	0x08000fad
 8000ce8:	08000e67 	.word	0x08000e67
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000cec:	4bb6      	ldr	r3, [pc, #728]	; (8000fc8 <HAL_RCC_GetSysClockFreq+0x34c>)
 8000cee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8000cf2:	e15f      	b.n	8000fb4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000cf4:	4bb5      	ldr	r3, [pc, #724]	; (8000fcc <HAL_RCC_GetSysClockFreq+0x350>)
 8000cf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8000cfa:	e15b      	b.n	8000fb4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000cfc:	4bb1      	ldr	r3, [pc, #708]	; (8000fc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d08:	4bae      	ldr	r3, [pc, #696]	; (8000fc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d031      	beq.n	8000d78 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d14:	4bab      	ldr	r3, [pc, #684]	; (8000fc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	099b      	lsrs	r3, r3, #6
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8000d1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000d20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d26:	663b      	str	r3, [r7, #96]	; 0x60
 8000d28:	2300      	movs	r3, #0
 8000d2a:	667b      	str	r3, [r7, #100]	; 0x64
 8000d2c:	4ba7      	ldr	r3, [pc, #668]	; (8000fcc <HAL_RCC_GetSysClockFreq+0x350>)
 8000d2e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8000d32:	462a      	mov	r2, r5
 8000d34:	fb03 f202 	mul.w	r2, r3, r2
 8000d38:	2300      	movs	r3, #0
 8000d3a:	4621      	mov	r1, r4
 8000d3c:	fb01 f303 	mul.w	r3, r1, r3
 8000d40:	4413      	add	r3, r2
 8000d42:	4aa2      	ldr	r2, [pc, #648]	; (8000fcc <HAL_RCC_GetSysClockFreq+0x350>)
 8000d44:	4621      	mov	r1, r4
 8000d46:	fba1 1202 	umull	r1, r2, r1, r2
 8000d4a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000d4c:	460a      	mov	r2, r1
 8000d4e:	67ba      	str	r2, [r7, #120]	; 0x78
 8000d50:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000d52:	4413      	add	r3, r2
 8000d54:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000d56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8000d5e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000d60:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8000d64:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8000d68:	f7ff fa2c 	bl	80001c4 <__aeabi_uldivmod>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	460b      	mov	r3, r1
 8000d70:	4613      	mov	r3, r2
 8000d72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000d76:	e064      	b.n	8000e42 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d78:	4b92      	ldr	r3, [pc, #584]	; (8000fc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	099b      	lsrs	r3, r3, #6
 8000d7e:	2200      	movs	r2, #0
 8000d80:	653b      	str	r3, [r7, #80]	; 0x50
 8000d82:	657a      	str	r2, [r7, #84]	; 0x54
 8000d84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d90:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8000d94:	4622      	mov	r2, r4
 8000d96:	462b      	mov	r3, r5
 8000d98:	f04f 0000 	mov.w	r0, #0
 8000d9c:	f04f 0100 	mov.w	r1, #0
 8000da0:	0159      	lsls	r1, r3, #5
 8000da2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000da6:	0150      	lsls	r0, r2, #5
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4621      	mov	r1, r4
 8000dae:	1a51      	subs	r1, r2, r1
 8000db0:	6139      	str	r1, [r7, #16]
 8000db2:	4629      	mov	r1, r5
 8000db4:	eb63 0301 	sbc.w	r3, r3, r1
 8000db8:	617b      	str	r3, [r7, #20]
 8000dba:	f04f 0200 	mov.w	r2, #0
 8000dbe:	f04f 0300 	mov.w	r3, #0
 8000dc2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8000dc6:	4659      	mov	r1, fp
 8000dc8:	018b      	lsls	r3, r1, #6
 8000dca:	4651      	mov	r1, sl
 8000dcc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000dd0:	4651      	mov	r1, sl
 8000dd2:	018a      	lsls	r2, r1, #6
 8000dd4:	4651      	mov	r1, sl
 8000dd6:	ebb2 0801 	subs.w	r8, r2, r1
 8000dda:	4659      	mov	r1, fp
 8000ddc:	eb63 0901 	sbc.w	r9, r3, r1
 8000de0:	f04f 0200 	mov.w	r2, #0
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000dec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000df0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000df4:	4690      	mov	r8, r2
 8000df6:	4699      	mov	r9, r3
 8000df8:	4623      	mov	r3, r4
 8000dfa:	eb18 0303 	adds.w	r3, r8, r3
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	462b      	mov	r3, r5
 8000e02:	eb49 0303 	adc.w	r3, r9, r3
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	f04f 0200 	mov.w	r2, #0
 8000e0c:	f04f 0300 	mov.w	r3, #0
 8000e10:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8000e14:	4629      	mov	r1, r5
 8000e16:	028b      	lsls	r3, r1, #10
 8000e18:	4621      	mov	r1, r4
 8000e1a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8000e1e:	4621      	mov	r1, r4
 8000e20:	028a      	lsls	r2, r1, #10
 8000e22:	4610      	mov	r0, r2
 8000e24:	4619      	mov	r1, r3
 8000e26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	643b      	str	r3, [r7, #64]	; 0x40
 8000e2e:	647a      	str	r2, [r7, #68]	; 0x44
 8000e30:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000e34:	f7ff f9c6 	bl	80001c4 <__aeabi_uldivmod>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000e42:	4b60      	ldr	r3, [pc, #384]	; (8000fc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	0c1b      	lsrs	r3, r3, #16
 8000e48:	f003 0303 	and.w	r3, r3, #3
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8000e54:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000e58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8000e64:	e0a6      	b.n	8000fb4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e66:	4b57      	ldr	r3, [pc, #348]	; (8000fc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e72:	4b54      	ldr	r3, [pc, #336]	; (8000fc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d02a      	beq.n	8000ed4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e7e:	4b51      	ldr	r3, [pc, #324]	; (8000fc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	099b      	lsrs	r3, r3, #6
 8000e84:	2200      	movs	r2, #0
 8000e86:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e88:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e8c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8000e90:	2100      	movs	r1, #0
 8000e92:	4b4e      	ldr	r3, [pc, #312]	; (8000fcc <HAL_RCC_GetSysClockFreq+0x350>)
 8000e94:	fb03 f201 	mul.w	r2, r3, r1
 8000e98:	2300      	movs	r3, #0
 8000e9a:	fb00 f303 	mul.w	r3, r0, r3
 8000e9e:	4413      	add	r3, r2
 8000ea0:	4a4a      	ldr	r2, [pc, #296]	; (8000fcc <HAL_RCC_GetSysClockFreq+0x350>)
 8000ea2:	fba0 1202 	umull	r1, r2, r0, r2
 8000ea6:	677a      	str	r2, [r7, #116]	; 0x74
 8000ea8:	460a      	mov	r2, r1
 8000eaa:	673a      	str	r2, [r7, #112]	; 0x70
 8000eac:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000eae:	4413      	add	r3, r2
 8000eb0:	677b      	str	r3, [r7, #116]	; 0x74
 8000eb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	633b      	str	r3, [r7, #48]	; 0x30
 8000eba:	637a      	str	r2, [r7, #52]	; 0x34
 8000ebc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000ec0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8000ec4:	f7ff f97e 	bl	80001c4 <__aeabi_uldivmod>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	460b      	mov	r3, r1
 8000ecc:	4613      	mov	r3, r2
 8000ece:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000ed2:	e05b      	b.n	8000f8c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ed4:	4b3b      	ldr	r3, [pc, #236]	; (8000fc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	099b      	lsrs	r3, r3, #6
 8000eda:	2200      	movs	r2, #0
 8000edc:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ede:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ee6:	623b      	str	r3, [r7, #32]
 8000ee8:	2300      	movs	r3, #0
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
 8000eec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8000ef0:	4642      	mov	r2, r8
 8000ef2:	464b      	mov	r3, r9
 8000ef4:	f04f 0000 	mov.w	r0, #0
 8000ef8:	f04f 0100 	mov.w	r1, #0
 8000efc:	0159      	lsls	r1, r3, #5
 8000efe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000f02:	0150      	lsls	r0, r2, #5
 8000f04:	4602      	mov	r2, r0
 8000f06:	460b      	mov	r3, r1
 8000f08:	4641      	mov	r1, r8
 8000f0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8000f0e:	4649      	mov	r1, r9
 8000f10:	eb63 0b01 	sbc.w	fp, r3, r1
 8000f14:	f04f 0200 	mov.w	r2, #0
 8000f18:	f04f 0300 	mov.w	r3, #0
 8000f1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8000f20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8000f24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8000f28:	ebb2 040a 	subs.w	r4, r2, sl
 8000f2c:	eb63 050b 	sbc.w	r5, r3, fp
 8000f30:	f04f 0200 	mov.w	r2, #0
 8000f34:	f04f 0300 	mov.w	r3, #0
 8000f38:	00eb      	lsls	r3, r5, #3
 8000f3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000f3e:	00e2      	lsls	r2, r4, #3
 8000f40:	4614      	mov	r4, r2
 8000f42:	461d      	mov	r5, r3
 8000f44:	4643      	mov	r3, r8
 8000f46:	18e3      	adds	r3, r4, r3
 8000f48:	603b      	str	r3, [r7, #0]
 8000f4a:	464b      	mov	r3, r9
 8000f4c:	eb45 0303 	adc.w	r3, r5, r3
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	f04f 0200 	mov.w	r2, #0
 8000f56:	f04f 0300 	mov.w	r3, #0
 8000f5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8000f5e:	4629      	mov	r1, r5
 8000f60:	028b      	lsls	r3, r1, #10
 8000f62:	4621      	mov	r1, r4
 8000f64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8000f68:	4621      	mov	r1, r4
 8000f6a:	028a      	lsls	r2, r1, #10
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000f74:	2200      	movs	r2, #0
 8000f76:	61bb      	str	r3, [r7, #24]
 8000f78:	61fa      	str	r2, [r7, #28]
 8000f7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000f7e:	f7ff f921 	bl	80001c4 <__aeabi_uldivmod>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	4613      	mov	r3, r2
 8000f88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8000f8c:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	0f1b      	lsrs	r3, r3, #28
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8000f9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000f9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8000faa:	e003      	b.n	8000fb4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_RCC_GetSysClockFreq+0x34c>)
 8000fae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8000fb2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000fb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3798      	adds	r7, #152	; 0x98
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	00f42400 	.word	0x00f42400
 8000fcc:	017d7840 	.word	0x017d7840

08000fd0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e28d      	b.n	80014fe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f000 8083 	beq.w	80010f6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000ff0:	4b94      	ldr	r3, [pc, #592]	; (8001244 <HAL_RCC_OscConfig+0x274>)
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	f003 030c 	and.w	r3, r3, #12
 8000ff8:	2b04      	cmp	r3, #4
 8000ffa:	d019      	beq.n	8001030 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000ffc:	4b91      	ldr	r3, [pc, #580]	; (8001244 <HAL_RCC_OscConfig+0x274>)
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001004:	2b08      	cmp	r3, #8
 8001006:	d106      	bne.n	8001016 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001008:	4b8e      	ldr	r3, [pc, #568]	; (8001244 <HAL_RCC_OscConfig+0x274>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001010:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001014:	d00c      	beq.n	8001030 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001016:	4b8b      	ldr	r3, [pc, #556]	; (8001244 <HAL_RCC_OscConfig+0x274>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800101e:	2b0c      	cmp	r3, #12
 8001020:	d112      	bne.n	8001048 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001022:	4b88      	ldr	r3, [pc, #544]	; (8001244 <HAL_RCC_OscConfig+0x274>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800102a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800102e:	d10b      	bne.n	8001048 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001030:	4b84      	ldr	r3, [pc, #528]	; (8001244 <HAL_RCC_OscConfig+0x274>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d05b      	beq.n	80010f4 <HAL_RCC_OscConfig+0x124>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d157      	bne.n	80010f4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e25a      	b.n	80014fe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001050:	d106      	bne.n	8001060 <HAL_RCC_OscConfig+0x90>
 8001052:	4b7c      	ldr	r3, [pc, #496]	; (8001244 <HAL_RCC_OscConfig+0x274>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a7b      	ldr	r2, [pc, #492]	; (8001244 <HAL_RCC_OscConfig+0x274>)
 8001058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	e01d      	b.n	800109c <HAL_RCC_OscConfig+0xcc>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001068:	d10c      	bne.n	8001084 <HAL_RCC_OscConfig+0xb4>
 800106a:	4b76      	ldr	r3, [pc, #472]	; (8001244 <HAL_RCC_OscConfig+0x274>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a75      	ldr	r2, [pc, #468]	; (8001244 <HAL_RCC_OscConfig+0x274>)
 8001070:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001074:	6013      	str	r3, [r2, #0]
 8001076:	4b73      	ldr	r3, [pc, #460]	; (8001244 <HAL_RCC_OscConfig+0x274>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a72      	ldr	r2, [pc, #456]	; (8001244 <HAL_RCC_OscConfig+0x274>)
 800107c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	e00b      	b.n	800109c <HAL_RCC_OscConfig+0xcc>
 8001084:	4b6f      	ldr	r3, [pc, #444]	; (8001244 <HAL_RCC_OscConfig+0x274>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a6e      	ldr	r2, [pc, #440]	; (8001244 <HAL_RCC_OscConfig+0x274>)
 800108a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	4b6c      	ldr	r3, [pc, #432]	; (8001244 <HAL_RCC_OscConfig+0x274>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a6b      	ldr	r2, [pc, #428]	; (8001244 <HAL_RCC_OscConfig+0x274>)
 8001096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800109a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d013      	beq.n	80010cc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010a4:	f7ff fa64 	bl	8000570 <HAL_GetTick>
 80010a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010aa:	e008      	b.n	80010be <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010ac:	f7ff fa60 	bl	8000570 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b64      	cmp	r3, #100	; 0x64
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e21f      	b.n	80014fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010be:	4b61      	ldr	r3, [pc, #388]	; (8001244 <HAL_RCC_OscConfig+0x274>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d0f0      	beq.n	80010ac <HAL_RCC_OscConfig+0xdc>
 80010ca:	e014      	b.n	80010f6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010cc:	f7ff fa50 	bl	8000570 <HAL_GetTick>
 80010d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010d2:	e008      	b.n	80010e6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d4:	f7ff fa4c 	bl	8000570 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b64      	cmp	r3, #100	; 0x64
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e20b      	b.n	80014fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010e6:	4b57      	ldr	r3, [pc, #348]	; (8001244 <HAL_RCC_OscConfig+0x274>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d1f0      	bne.n	80010d4 <HAL_RCC_OscConfig+0x104>
 80010f2:	e000      	b.n	80010f6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d06f      	beq.n	80011e2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001102:	4b50      	ldr	r3, [pc, #320]	; (8001244 <HAL_RCC_OscConfig+0x274>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f003 030c 	and.w	r3, r3, #12
 800110a:	2b00      	cmp	r3, #0
 800110c:	d017      	beq.n	800113e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800110e:	4b4d      	ldr	r3, [pc, #308]	; (8001244 <HAL_RCC_OscConfig+0x274>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001116:	2b08      	cmp	r3, #8
 8001118:	d105      	bne.n	8001126 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800111a:	4b4a      	ldr	r3, [pc, #296]	; (8001244 <HAL_RCC_OscConfig+0x274>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d00b      	beq.n	800113e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001126:	4b47      	ldr	r3, [pc, #284]	; (8001244 <HAL_RCC_OscConfig+0x274>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800112e:	2b0c      	cmp	r3, #12
 8001130:	d11c      	bne.n	800116c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001132:	4b44      	ldr	r3, [pc, #272]	; (8001244 <HAL_RCC_OscConfig+0x274>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d116      	bne.n	800116c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800113e:	4b41      	ldr	r3, [pc, #260]	; (8001244 <HAL_RCC_OscConfig+0x274>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d005      	beq.n	8001156 <HAL_RCC_OscConfig+0x186>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d001      	beq.n	8001156 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e1d3      	b.n	80014fe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001156:	4b3b      	ldr	r3, [pc, #236]	; (8001244 <HAL_RCC_OscConfig+0x274>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	691b      	ldr	r3, [r3, #16]
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	4937      	ldr	r1, [pc, #220]	; (8001244 <HAL_RCC_OscConfig+0x274>)
 8001166:	4313      	orrs	r3, r2
 8001168:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800116a:	e03a      	b.n	80011e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d020      	beq.n	80011b6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001174:	4b34      	ldr	r3, [pc, #208]	; (8001248 <HAL_RCC_OscConfig+0x278>)
 8001176:	2201      	movs	r2, #1
 8001178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800117a:	f7ff f9f9 	bl	8000570 <HAL_GetTick>
 800117e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001180:	e008      	b.n	8001194 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001182:	f7ff f9f5 	bl	8000570 <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d901      	bls.n	8001194 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001190:	2303      	movs	r3, #3
 8001192:	e1b4      	b.n	80014fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001194:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <HAL_RCC_OscConfig+0x274>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d0f0      	beq.n	8001182 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a0:	4b28      	ldr	r3, [pc, #160]	; (8001244 <HAL_RCC_OscConfig+0x274>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	4925      	ldr	r1, [pc, #148]	; (8001244 <HAL_RCC_OscConfig+0x274>)
 80011b0:	4313      	orrs	r3, r2
 80011b2:	600b      	str	r3, [r1, #0]
 80011b4:	e015      	b.n	80011e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011b6:	4b24      	ldr	r3, [pc, #144]	; (8001248 <HAL_RCC_OscConfig+0x278>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011bc:	f7ff f9d8 	bl	8000570 <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011c2:	e008      	b.n	80011d6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011c4:	f7ff f9d4 	bl	8000570 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d901      	bls.n	80011d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e193      	b.n	80014fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011d6:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <HAL_RCC_OscConfig+0x274>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1f0      	bne.n	80011c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0308 	and.w	r3, r3, #8
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d036      	beq.n	800125c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d016      	beq.n	8001224 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <HAL_RCC_OscConfig+0x27c>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011fc:	f7ff f9b8 	bl	8000570 <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001204:	f7ff f9b4 	bl	8000570 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e173      	b.n	80014fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <HAL_RCC_OscConfig+0x274>)
 8001218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d0f0      	beq.n	8001204 <HAL_RCC_OscConfig+0x234>
 8001222:	e01b      	b.n	800125c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001224:	4b09      	ldr	r3, [pc, #36]	; (800124c <HAL_RCC_OscConfig+0x27c>)
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800122a:	f7ff f9a1 	bl	8000570 <HAL_GetTick>
 800122e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001230:	e00e      	b.n	8001250 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001232:	f7ff f99d 	bl	8000570 <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d907      	bls.n	8001250 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e15c      	b.n	80014fe <HAL_RCC_OscConfig+0x52e>
 8001244:	40023800 	.word	0x40023800
 8001248:	42470000 	.word	0x42470000
 800124c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001250:	4b8a      	ldr	r3, [pc, #552]	; (800147c <HAL_RCC_OscConfig+0x4ac>)
 8001252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1ea      	bne.n	8001232 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0304 	and.w	r3, r3, #4
 8001264:	2b00      	cmp	r3, #0
 8001266:	f000 8097 	beq.w	8001398 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800126a:	2300      	movs	r3, #0
 800126c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800126e:	4b83      	ldr	r3, [pc, #524]	; (800147c <HAL_RCC_OscConfig+0x4ac>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d10f      	bne.n	800129a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	4b7f      	ldr	r3, [pc, #508]	; (800147c <HAL_RCC_OscConfig+0x4ac>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	4a7e      	ldr	r2, [pc, #504]	; (800147c <HAL_RCC_OscConfig+0x4ac>)
 8001284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001288:	6413      	str	r3, [r2, #64]	; 0x40
 800128a:	4b7c      	ldr	r3, [pc, #496]	; (800147c <HAL_RCC_OscConfig+0x4ac>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001296:	2301      	movs	r3, #1
 8001298:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800129a:	4b79      	ldr	r3, [pc, #484]	; (8001480 <HAL_RCC_OscConfig+0x4b0>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d118      	bne.n	80012d8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012a6:	4b76      	ldr	r3, [pc, #472]	; (8001480 <HAL_RCC_OscConfig+0x4b0>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a75      	ldr	r2, [pc, #468]	; (8001480 <HAL_RCC_OscConfig+0x4b0>)
 80012ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012b2:	f7ff f95d 	bl	8000570 <HAL_GetTick>
 80012b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b8:	e008      	b.n	80012cc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ba:	f7ff f959 	bl	8000570 <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d901      	bls.n	80012cc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e118      	b.n	80014fe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012cc:	4b6c      	ldr	r3, [pc, #432]	; (8001480 <HAL_RCC_OscConfig+0x4b0>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d0f0      	beq.n	80012ba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d106      	bne.n	80012ee <HAL_RCC_OscConfig+0x31e>
 80012e0:	4b66      	ldr	r3, [pc, #408]	; (800147c <HAL_RCC_OscConfig+0x4ac>)
 80012e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012e4:	4a65      	ldr	r2, [pc, #404]	; (800147c <HAL_RCC_OscConfig+0x4ac>)
 80012e6:	f043 0301 	orr.w	r3, r3, #1
 80012ea:	6713      	str	r3, [r2, #112]	; 0x70
 80012ec:	e01c      	b.n	8001328 <HAL_RCC_OscConfig+0x358>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	2b05      	cmp	r3, #5
 80012f4:	d10c      	bne.n	8001310 <HAL_RCC_OscConfig+0x340>
 80012f6:	4b61      	ldr	r3, [pc, #388]	; (800147c <HAL_RCC_OscConfig+0x4ac>)
 80012f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012fa:	4a60      	ldr	r2, [pc, #384]	; (800147c <HAL_RCC_OscConfig+0x4ac>)
 80012fc:	f043 0304 	orr.w	r3, r3, #4
 8001300:	6713      	str	r3, [r2, #112]	; 0x70
 8001302:	4b5e      	ldr	r3, [pc, #376]	; (800147c <HAL_RCC_OscConfig+0x4ac>)
 8001304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001306:	4a5d      	ldr	r2, [pc, #372]	; (800147c <HAL_RCC_OscConfig+0x4ac>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6713      	str	r3, [r2, #112]	; 0x70
 800130e:	e00b      	b.n	8001328 <HAL_RCC_OscConfig+0x358>
 8001310:	4b5a      	ldr	r3, [pc, #360]	; (800147c <HAL_RCC_OscConfig+0x4ac>)
 8001312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001314:	4a59      	ldr	r2, [pc, #356]	; (800147c <HAL_RCC_OscConfig+0x4ac>)
 8001316:	f023 0301 	bic.w	r3, r3, #1
 800131a:	6713      	str	r3, [r2, #112]	; 0x70
 800131c:	4b57      	ldr	r3, [pc, #348]	; (800147c <HAL_RCC_OscConfig+0x4ac>)
 800131e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001320:	4a56      	ldr	r2, [pc, #344]	; (800147c <HAL_RCC_OscConfig+0x4ac>)
 8001322:	f023 0304 	bic.w	r3, r3, #4
 8001326:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d015      	beq.n	800135c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001330:	f7ff f91e 	bl	8000570 <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001336:	e00a      	b.n	800134e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001338:	f7ff f91a 	bl	8000570 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	f241 3288 	movw	r2, #5000	; 0x1388
 8001346:	4293      	cmp	r3, r2
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e0d7      	b.n	80014fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800134e:	4b4b      	ldr	r3, [pc, #300]	; (800147c <HAL_RCC_OscConfig+0x4ac>)
 8001350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d0ee      	beq.n	8001338 <HAL_RCC_OscConfig+0x368>
 800135a:	e014      	b.n	8001386 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800135c:	f7ff f908 	bl	8000570 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001362:	e00a      	b.n	800137a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001364:	f7ff f904 	bl	8000570 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001372:	4293      	cmp	r3, r2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e0c1      	b.n	80014fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800137a:	4b40      	ldr	r3, [pc, #256]	; (800147c <HAL_RCC_OscConfig+0x4ac>)
 800137c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1ee      	bne.n	8001364 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001386:	7dfb      	ldrb	r3, [r7, #23]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d105      	bne.n	8001398 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800138c:	4b3b      	ldr	r3, [pc, #236]	; (800147c <HAL_RCC_OscConfig+0x4ac>)
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	4a3a      	ldr	r2, [pc, #232]	; (800147c <HAL_RCC_OscConfig+0x4ac>)
 8001392:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001396:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	2b00      	cmp	r3, #0
 800139e:	f000 80ad 	beq.w	80014fc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013a2:	4b36      	ldr	r3, [pc, #216]	; (800147c <HAL_RCC_OscConfig+0x4ac>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f003 030c 	and.w	r3, r3, #12
 80013aa:	2b08      	cmp	r3, #8
 80013ac:	d060      	beq.n	8001470 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d145      	bne.n	8001442 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013b6:	4b33      	ldr	r3, [pc, #204]	; (8001484 <HAL_RCC_OscConfig+0x4b4>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013bc:	f7ff f8d8 	bl	8000570 <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013c4:	f7ff f8d4 	bl	8000570 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e093      	b.n	80014fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013d6:	4b29      	ldr	r3, [pc, #164]	; (800147c <HAL_RCC_OscConfig+0x4ac>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1f0      	bne.n	80013c4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69da      	ldr	r2, [r3, #28]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a1b      	ldr	r3, [r3, #32]
 80013ea:	431a      	orrs	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f0:	019b      	lsls	r3, r3, #6
 80013f2:	431a      	orrs	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f8:	085b      	lsrs	r3, r3, #1
 80013fa:	3b01      	subs	r3, #1
 80013fc:	041b      	lsls	r3, r3, #16
 80013fe:	431a      	orrs	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001404:	061b      	lsls	r3, r3, #24
 8001406:	431a      	orrs	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140c:	071b      	lsls	r3, r3, #28
 800140e:	491b      	ldr	r1, [pc, #108]	; (800147c <HAL_RCC_OscConfig+0x4ac>)
 8001410:	4313      	orrs	r3, r2
 8001412:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001414:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <HAL_RCC_OscConfig+0x4b4>)
 8001416:	2201      	movs	r2, #1
 8001418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141a:	f7ff f8a9 	bl	8000570 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001422:	f7ff f8a5 	bl	8000570 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e064      	b.n	80014fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <HAL_RCC_OscConfig+0x4ac>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f0      	beq.n	8001422 <HAL_RCC_OscConfig+0x452>
 8001440:	e05c      	b.n	80014fc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001442:	4b10      	ldr	r3, [pc, #64]	; (8001484 <HAL_RCC_OscConfig+0x4b4>)
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001448:	f7ff f892 	bl	8000570 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001450:	f7ff f88e 	bl	8000570 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e04d      	b.n	80014fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_RCC_OscConfig+0x4ac>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f0      	bne.n	8001450 <HAL_RCC_OscConfig+0x480>
 800146e:	e045      	b.n	80014fc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d107      	bne.n	8001488 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e040      	b.n	80014fe <HAL_RCC_OscConfig+0x52e>
 800147c:	40023800 	.word	0x40023800
 8001480:	40007000 	.word	0x40007000
 8001484:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001488:	4b1f      	ldr	r3, [pc, #124]	; (8001508 <HAL_RCC_OscConfig+0x538>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d030      	beq.n	80014f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d129      	bne.n	80014f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d122      	bne.n	80014f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014b8:	4013      	ands	r3, r2
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d119      	bne.n	80014f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ce:	085b      	lsrs	r3, r3, #1
 80014d0:	3b01      	subs	r3, #1
 80014d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d10f      	bne.n	80014f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d107      	bne.n	80014f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d001      	beq.n	80014fc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e000      	b.n	80014fe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800

0800150c <__libc_init_array>:
 800150c:	b570      	push	{r4, r5, r6, lr}
 800150e:	4d0d      	ldr	r5, [pc, #52]	; (8001544 <__libc_init_array+0x38>)
 8001510:	4c0d      	ldr	r4, [pc, #52]	; (8001548 <__libc_init_array+0x3c>)
 8001512:	1b64      	subs	r4, r4, r5
 8001514:	10a4      	asrs	r4, r4, #2
 8001516:	2600      	movs	r6, #0
 8001518:	42a6      	cmp	r6, r4
 800151a:	d109      	bne.n	8001530 <__libc_init_array+0x24>
 800151c:	4d0b      	ldr	r5, [pc, #44]	; (800154c <__libc_init_array+0x40>)
 800151e:	4c0c      	ldr	r4, [pc, #48]	; (8001550 <__libc_init_array+0x44>)
 8001520:	f000 f970 	bl	8001804 <_init>
 8001524:	1b64      	subs	r4, r4, r5
 8001526:	10a4      	asrs	r4, r4, #2
 8001528:	2600      	movs	r6, #0
 800152a:	42a6      	cmp	r6, r4
 800152c:	d105      	bne.n	800153a <__libc_init_array+0x2e>
 800152e:	bd70      	pop	{r4, r5, r6, pc}
 8001530:	f855 3b04 	ldr.w	r3, [r5], #4
 8001534:	4798      	blx	r3
 8001536:	3601      	adds	r6, #1
 8001538:	e7ee      	b.n	8001518 <__libc_init_array+0xc>
 800153a:	f855 3b04 	ldr.w	r3, [r5], #4
 800153e:	4798      	blx	r3
 8001540:	3601      	adds	r6, #1
 8001542:	e7f2      	b.n	800152a <__libc_init_array+0x1e>
 8001544:	08001834 	.word	0x08001834
 8001548:	08001834 	.word	0x08001834
 800154c:	08001834 	.word	0x08001834
 8001550:	08001838 	.word	0x08001838

08001554 <memset>:
 8001554:	4402      	add	r2, r0
 8001556:	4603      	mov	r3, r0
 8001558:	4293      	cmp	r3, r2
 800155a:	d100      	bne.n	800155e <memset+0xa>
 800155c:	4770      	bx	lr
 800155e:	f803 1b01 	strb.w	r1, [r3], #1
 8001562:	e7f9      	b.n	8001558 <memset+0x4>

08001564 <__udivmoddi4>:
 8001564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001568:	4686      	mov	lr, r0
 800156a:	468c      	mov	ip, r1
 800156c:	4608      	mov	r0, r1
 800156e:	9e08      	ldr	r6, [sp, #32]
 8001570:	4615      	mov	r5, r2
 8001572:	4674      	mov	r4, lr
 8001574:	4619      	mov	r1, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	f040 80c2 	bne.w	8001700 <__udivmoddi4+0x19c>
 800157c:	4285      	cmp	r5, r0
 800157e:	fab2 f282 	clz	r2, r2
 8001582:	d945      	bls.n	8001610 <__udivmoddi4+0xac>
 8001584:	b14a      	cbz	r2, 800159a <__udivmoddi4+0x36>
 8001586:	f1c2 0320 	rsb	r3, r2, #32
 800158a:	fa00 fc02 	lsl.w	ip, r0, r2
 800158e:	fa2e f303 	lsr.w	r3, lr, r3
 8001592:	4095      	lsls	r5, r2
 8001594:	ea43 0c0c 	orr.w	ip, r3, ip
 8001598:	4094      	lsls	r4, r2
 800159a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800159e:	b2a8      	uxth	r0, r5
 80015a0:	fbbc f8fe 	udiv	r8, ip, lr
 80015a4:	0c23      	lsrs	r3, r4, #16
 80015a6:	fb0e cc18 	mls	ip, lr, r8, ip
 80015aa:	fb08 f900 	mul.w	r9, r8, r0
 80015ae:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80015b2:	4599      	cmp	r9, r3
 80015b4:	d928      	bls.n	8001608 <__udivmoddi4+0xa4>
 80015b6:	18eb      	adds	r3, r5, r3
 80015b8:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
 80015bc:	d204      	bcs.n	80015c8 <__udivmoddi4+0x64>
 80015be:	4599      	cmp	r9, r3
 80015c0:	d902      	bls.n	80015c8 <__udivmoddi4+0x64>
 80015c2:	f1a8 0702 	sub.w	r7, r8, #2
 80015c6:	442b      	add	r3, r5
 80015c8:	eba3 0309 	sub.w	r3, r3, r9
 80015cc:	b2a4      	uxth	r4, r4
 80015ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80015d2:	fb0e 331c 	mls	r3, lr, ip, r3
 80015d6:	fb0c f000 	mul.w	r0, ip, r0
 80015da:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80015de:	42a0      	cmp	r0, r4
 80015e0:	d914      	bls.n	800160c <__udivmoddi4+0xa8>
 80015e2:	192c      	adds	r4, r5, r4
 80015e4:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 80015e8:	d204      	bcs.n	80015f4 <__udivmoddi4+0x90>
 80015ea:	42a0      	cmp	r0, r4
 80015ec:	d902      	bls.n	80015f4 <__udivmoddi4+0x90>
 80015ee:	f1ac 0302 	sub.w	r3, ip, #2
 80015f2:	442c      	add	r4, r5
 80015f4:	1a24      	subs	r4, r4, r0
 80015f6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
 80015fa:	b11e      	cbz	r6, 8001604 <__udivmoddi4+0xa0>
 80015fc:	40d4      	lsrs	r4, r2
 80015fe:	2300      	movs	r3, #0
 8001600:	6034      	str	r4, [r6, #0]
 8001602:	6073      	str	r3, [r6, #4]
 8001604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001608:	4647      	mov	r7, r8
 800160a:	e7dd      	b.n	80015c8 <__udivmoddi4+0x64>
 800160c:	4663      	mov	r3, ip
 800160e:	e7f1      	b.n	80015f4 <__udivmoddi4+0x90>
 8001610:	bb92      	cbnz	r2, 8001678 <__udivmoddi4+0x114>
 8001612:	1b43      	subs	r3, r0, r5
 8001614:	2101      	movs	r1, #1
 8001616:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800161a:	b2af      	uxth	r7, r5
 800161c:	fbb3 fcfe 	udiv	ip, r3, lr
 8001620:	0c20      	lsrs	r0, r4, #16
 8001622:	fb0e 331c 	mls	r3, lr, ip, r3
 8001626:	fb0c f807 	mul.w	r8, ip, r7
 800162a:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800162e:	4598      	cmp	r8, r3
 8001630:	d962      	bls.n	80016f8 <__udivmoddi4+0x194>
 8001632:	18eb      	adds	r3, r5, r3
 8001634:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8001638:	d204      	bcs.n	8001644 <__udivmoddi4+0xe0>
 800163a:	4598      	cmp	r8, r3
 800163c:	d902      	bls.n	8001644 <__udivmoddi4+0xe0>
 800163e:	f1ac 0002 	sub.w	r0, ip, #2
 8001642:	442b      	add	r3, r5
 8001644:	eba3 0308 	sub.w	r3, r3, r8
 8001648:	b2a4      	uxth	r4, r4
 800164a:	fbb3 fcfe 	udiv	ip, r3, lr
 800164e:	fb0e 331c 	mls	r3, lr, ip, r3
 8001652:	fb0c f707 	mul.w	r7, ip, r7
 8001656:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800165a:	42a7      	cmp	r7, r4
 800165c:	d94e      	bls.n	80016fc <__udivmoddi4+0x198>
 800165e:	192c      	adds	r4, r5, r4
 8001660:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8001664:	d204      	bcs.n	8001670 <__udivmoddi4+0x10c>
 8001666:	42a7      	cmp	r7, r4
 8001668:	d902      	bls.n	8001670 <__udivmoddi4+0x10c>
 800166a:	f1ac 0302 	sub.w	r3, ip, #2
 800166e:	442c      	add	r4, r5
 8001670:	1be4      	subs	r4, r4, r7
 8001672:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001676:	e7c0      	b.n	80015fa <__udivmoddi4+0x96>
 8001678:	f1c2 0320 	rsb	r3, r2, #32
 800167c:	fa20 f103 	lsr.w	r1, r0, r3
 8001680:	4095      	lsls	r5, r2
 8001682:	4090      	lsls	r0, r2
 8001684:	fa2e f303 	lsr.w	r3, lr, r3
 8001688:	4303      	orrs	r3, r0
 800168a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800168e:	b2af      	uxth	r7, r5
 8001690:	fbb1 fcfe 	udiv	ip, r1, lr
 8001694:	fb0e 101c 	mls	r0, lr, ip, r1
 8001698:	0c19      	lsrs	r1, r3, #16
 800169a:	fb0c f807 	mul.w	r8, ip, r7
 800169e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80016a2:	4588      	cmp	r8, r1
 80016a4:	fa04 f402 	lsl.w	r4, r4, r2
 80016a8:	d922      	bls.n	80016f0 <__udivmoddi4+0x18c>
 80016aa:	1869      	adds	r1, r5, r1
 80016ac:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80016b0:	d204      	bcs.n	80016bc <__udivmoddi4+0x158>
 80016b2:	4588      	cmp	r8, r1
 80016b4:	d902      	bls.n	80016bc <__udivmoddi4+0x158>
 80016b6:	f1ac 0002 	sub.w	r0, ip, #2
 80016ba:	4429      	add	r1, r5
 80016bc:	eba1 0108 	sub.w	r1, r1, r8
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	fbb1 fcfe 	udiv	ip, r1, lr
 80016c6:	fb0e 111c 	mls	r1, lr, ip, r1
 80016ca:	fb0c f707 	mul.w	r7, ip, r7
 80016ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80016d2:	429f      	cmp	r7, r3
 80016d4:	d90e      	bls.n	80016f4 <__udivmoddi4+0x190>
 80016d6:	18eb      	adds	r3, r5, r3
 80016d8:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80016dc:	d204      	bcs.n	80016e8 <__udivmoddi4+0x184>
 80016de:	429f      	cmp	r7, r3
 80016e0:	d902      	bls.n	80016e8 <__udivmoddi4+0x184>
 80016e2:	f1ac 0102 	sub.w	r1, ip, #2
 80016e6:	442b      	add	r3, r5
 80016e8:	1bdb      	subs	r3, r3, r7
 80016ea:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80016ee:	e792      	b.n	8001616 <__udivmoddi4+0xb2>
 80016f0:	4660      	mov	r0, ip
 80016f2:	e7e3      	b.n	80016bc <__udivmoddi4+0x158>
 80016f4:	4661      	mov	r1, ip
 80016f6:	e7f7      	b.n	80016e8 <__udivmoddi4+0x184>
 80016f8:	4660      	mov	r0, ip
 80016fa:	e7a3      	b.n	8001644 <__udivmoddi4+0xe0>
 80016fc:	4663      	mov	r3, ip
 80016fe:	e7b7      	b.n	8001670 <__udivmoddi4+0x10c>
 8001700:	4283      	cmp	r3, r0
 8001702:	d906      	bls.n	8001712 <__udivmoddi4+0x1ae>
 8001704:	b916      	cbnz	r6, 800170c <__udivmoddi4+0x1a8>
 8001706:	2100      	movs	r1, #0
 8001708:	4608      	mov	r0, r1
 800170a:	e77b      	b.n	8001604 <__udivmoddi4+0xa0>
 800170c:	e9c6 e000 	strd	lr, r0, [r6]
 8001710:	e7f9      	b.n	8001706 <__udivmoddi4+0x1a2>
 8001712:	fab3 f783 	clz	r7, r3
 8001716:	b98f      	cbnz	r7, 800173c <__udivmoddi4+0x1d8>
 8001718:	4283      	cmp	r3, r0
 800171a:	d301      	bcc.n	8001720 <__udivmoddi4+0x1bc>
 800171c:	4572      	cmp	r2, lr
 800171e:	d808      	bhi.n	8001732 <__udivmoddi4+0x1ce>
 8001720:	ebbe 0402 	subs.w	r4, lr, r2
 8001724:	eb60 0303 	sbc.w	r3, r0, r3
 8001728:	2001      	movs	r0, #1
 800172a:	469c      	mov	ip, r3
 800172c:	b91e      	cbnz	r6, 8001736 <__udivmoddi4+0x1d2>
 800172e:	2100      	movs	r1, #0
 8001730:	e768      	b.n	8001604 <__udivmoddi4+0xa0>
 8001732:	4638      	mov	r0, r7
 8001734:	e7fa      	b.n	800172c <__udivmoddi4+0x1c8>
 8001736:	e9c6 4c00 	strd	r4, ip, [r6]
 800173a:	e7f8      	b.n	800172e <__udivmoddi4+0x1ca>
 800173c:	f1c7 0c20 	rsb	ip, r7, #32
 8001740:	40bb      	lsls	r3, r7
 8001742:	fa22 f40c 	lsr.w	r4, r2, ip
 8001746:	431c      	orrs	r4, r3
 8001748:	fa2e f10c 	lsr.w	r1, lr, ip
 800174c:	fa20 f30c 	lsr.w	r3, r0, ip
 8001750:	40b8      	lsls	r0, r7
 8001752:	4301      	orrs	r1, r0
 8001754:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8001758:	fa0e f507 	lsl.w	r5, lr, r7
 800175c:	fbb3 f8f9 	udiv	r8, r3, r9
 8001760:	fa1f fe84 	uxth.w	lr, r4
 8001764:	fb09 3018 	mls	r0, r9, r8, r3
 8001768:	0c0b      	lsrs	r3, r1, #16
 800176a:	fb08 fa0e 	mul.w	sl, r8, lr
 800176e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001772:	459a      	cmp	sl, r3
 8001774:	fa02 f207 	lsl.w	r2, r2, r7
 8001778:	d940      	bls.n	80017fc <__udivmoddi4+0x298>
 800177a:	18e3      	adds	r3, r4, r3
 800177c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8001780:	d204      	bcs.n	800178c <__udivmoddi4+0x228>
 8001782:	459a      	cmp	sl, r3
 8001784:	d902      	bls.n	800178c <__udivmoddi4+0x228>
 8001786:	f1a8 0002 	sub.w	r0, r8, #2
 800178a:	4423      	add	r3, r4
 800178c:	eba3 030a 	sub.w	r3, r3, sl
 8001790:	b289      	uxth	r1, r1
 8001792:	fbb3 f8f9 	udiv	r8, r3, r9
 8001796:	fb09 3318 	mls	r3, r9, r8, r3
 800179a:	fb08 fe0e 	mul.w	lr, r8, lr
 800179e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80017a2:	458e      	cmp	lr, r1
 80017a4:	d92c      	bls.n	8001800 <__udivmoddi4+0x29c>
 80017a6:	1861      	adds	r1, r4, r1
 80017a8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80017ac:	d204      	bcs.n	80017b8 <__udivmoddi4+0x254>
 80017ae:	458e      	cmp	lr, r1
 80017b0:	d902      	bls.n	80017b8 <__udivmoddi4+0x254>
 80017b2:	f1a8 0302 	sub.w	r3, r8, #2
 80017b6:	4421      	add	r1, r4
 80017b8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80017bc:	fba0 9802 	umull	r9, r8, r0, r2
 80017c0:	eba1 010e 	sub.w	r1, r1, lr
 80017c4:	4541      	cmp	r1, r8
 80017c6:	46ce      	mov	lr, r9
 80017c8:	4643      	mov	r3, r8
 80017ca:	d302      	bcc.n	80017d2 <__udivmoddi4+0x26e>
 80017cc:	d106      	bne.n	80017dc <__udivmoddi4+0x278>
 80017ce:	454d      	cmp	r5, r9
 80017d0:	d204      	bcs.n	80017dc <__udivmoddi4+0x278>
 80017d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80017d6:	eb68 0304 	sbc.w	r3, r8, r4
 80017da:	3801      	subs	r0, #1
 80017dc:	2e00      	cmp	r6, #0
 80017de:	d0a6      	beq.n	800172e <__udivmoddi4+0x1ca>
 80017e0:	ebb5 020e 	subs.w	r2, r5, lr
 80017e4:	eb61 0103 	sbc.w	r1, r1, r3
 80017e8:	fa01 fc0c 	lsl.w	ip, r1, ip
 80017ec:	fa22 f307 	lsr.w	r3, r2, r7
 80017f0:	ea4c 0303 	orr.w	r3, ip, r3
 80017f4:	40f9      	lsrs	r1, r7
 80017f6:	e9c6 3100 	strd	r3, r1, [r6]
 80017fa:	e798      	b.n	800172e <__udivmoddi4+0x1ca>
 80017fc:	4640      	mov	r0, r8
 80017fe:	e7c5      	b.n	800178c <__udivmoddi4+0x228>
 8001800:	4643      	mov	r3, r8
 8001802:	e7d9      	b.n	80017b8 <__udivmoddi4+0x254>

08001804 <_init>:
 8001804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001806:	bf00      	nop
 8001808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800180a:	bc08      	pop	{r3}
 800180c:	469e      	mov	lr, r3
 800180e:	4770      	bx	lr

08001810 <_fini>:
 8001810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001812:	bf00      	nop
 8001814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001816:	bc08      	pop	{r3}
 8001818:	469e      	mov	lr, r3
 800181a:	4770      	bx	lr
